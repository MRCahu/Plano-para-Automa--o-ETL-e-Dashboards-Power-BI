"""
Script para criar visualiza√ß√µes impressionantes para o README do GitHub
Gera gr√°ficos, diagramas e imagens para documenta√ß√£o
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from datetime import datetime, timedelta
import matplotlib.patches as mpatches
from matplotlib.patches import FancyBboxPatch
import warnings
warnings.filterwarnings('ignore')

# Configurar estilo
plt.style.use('default')
sns.set_palette("husl")

def criar_banner_projeto():
    """Cria banner principal do projeto"""
    fig, ax = plt.subplots(figsize=(16, 6))
    
    # Fundo gradiente
    gradient = np.linspace(0, 1, 256).reshape(1, -1)
    gradient = np.vstack((gradient, gradient))
    
    # Cores do gradiente (azul para roxo)
    ax.imshow(gradient, aspect='auto', cmap='viridis', alpha=0.8, extent=[0, 16, 0, 6])
    
    # T√≠tulo principal
    ax.text(8, 4.2, 'üöÄ AUTOMA√á√ÉO ETL & DASHBOARDS POWER BI', 
            fontsize=28, fontweight='bold', ha='center', va='center', 
            color='white', family='sans-serif')
    
    # Subt√≠tulo
    ax.text(8, 3.2, 'Pipeline Completo de Dados com Python, Excel e Power BI', 
            fontsize=16, ha='center', va='center', 
            color='white', alpha=0.9, family='sans-serif')
    
    # √çcones e tecnologias
    tecnologias = ['üêç Python', 'üìä Excel', 'üìà Power BI', 'üîÑ ETL', 'üìã VBA', '‚òÅÔ∏è Cloud']
    for i, tech in enumerate(tecnologias):
        x_pos = 1.5 + (i * 2.3)
        ax.text(x_pos, 1.5, tech, fontsize=12, ha='center', va='center',
                color='white', fontweight='bold',
                bbox=dict(boxstyle="round,pad=0.3", facecolor=(1, 1, 1, 0.2), 
                         edgecolor='white', linewidth=1))
    
    ax.set_xlim(0, 16)
    ax.set_ylim(0, 6)
    ax.axis('off')
    
    plt.tight_layout()
    plt.savefig('/home/ubuntu/banner_projeto.png', dpi=300, bbox_inches='tight', 
                facecolor='none', edgecolor='none')
    plt.close()

def criar_arquitetura_etl():
    """Cria diagrama de arquitetura ETL"""
    fig, ax = plt.subplots(figsize=(14, 10))
    
    # Cores
    cor_extract = '#FF6B6B'
    cor_transform = '#4ECDC4'
    cor_load = '#45B7D1'
    cor_arrow = '#2C3E50'
    
    # Fun√ß√£o para criar caixas
    def criar_caixa(ax, x, y, width, height, text, color, text_color='white'):
        box = FancyBboxPatch((x, y), width, height,
                           boxstyle="round,pad=0.1",
                           facecolor=color, edgecolor='white', linewidth=2)
        ax.add_patch(box)
        ax.text(x + width/2, y + height/2, text, ha='center', va='center',
                fontsize=11, fontweight='bold', color=text_color, wrap=True)
    
    # Fun√ß√£o para criar setas
    def criar_seta(ax, x1, y1, x2, y2):
        ax.annotate('', xy=(x2, y2), xytext=(x1, y1),
                   arrowprops=dict(arrowstyle='->', lw=3, color=cor_arrow))
    
    # EXTRACT (Fontes de Dados)
    ax.text(2, 9, 'EXTRACT', fontsize=16, fontweight='bold', ha='center', color=cor_extract)
    
    fontes = [
        ('üìä Excel Files', 0.5, 8),
        ('üóÑÔ∏è Databases', 0.5, 7),
        ('üìÑ CSV Files', 0.5, 6),
        ('üåê APIs', 3.5, 8),
        ('‚òÅÔ∏è Cloud Storage', 3.5, 7),
        ('üìã ERP Systems', 3.5, 6)
    ]
    
    for fonte, x, y in fontes:
        criar_caixa(ax, x, y, 2.5, 0.8, fonte, cor_extract)
    
    # Setas para Transform
    for _, x, y in fontes:
        criar_seta(ax, x + 2.5, y + 0.4, 6.5, 5.5)
    
    # TRANSFORM (Processamento)
    ax.text(7.5, 9, 'TRANSFORM', fontsize=16, fontweight='bold', ha='center', color=cor_transform)
    
    transforms = [
        ('üßπ Data Cleaning', 6, 7.5),
        ('üîÑ Data Validation', 6, 6.5),
        ('üìä Aggregations', 6, 5.5),
        ('üè∑Ô∏è Categorization', 9, 7.5),
        ('üìà Calculations', 9, 6.5),
        ('üîç Quality Checks', 9, 5.5)
    ]
    
    for transform, x, y in transforms:
        criar_caixa(ax, x, y, 2.5, 0.8, transform, cor_transform)
    
    # Setas para Load
    for _, x, y in transforms:
        criar_seta(ax, x + 2.5, y + 0.4, 13, 4)
    
    # LOAD (Destinos)
    ax.text(13.5, 9, 'LOAD', fontsize=16, fontweight='bold', ha='center', color=cor_load)
    
    destinos = [
        ('üìä Power BI', 12, 4.5),
        ('üìà Dashboards', 12, 3.5),
        ('üìã Excel Reports', 12, 2.5),
        ('üìß Email Reports', 12, 1.5)
    ]
    
    for destino, x, y in destinos:
        criar_caixa(ax, x, y, 2.5, 0.8, destino, cor_load)
    
    # T√≠tulo
    ax.text(7.5, 10.5, 'ARQUITETURA ETL - PIPELINE DE DADOS', 
            fontsize=18, fontweight='bold', ha='center', color='#2C3E50')
    
    # Legenda
    legend_elements = [
        mpatches.Patch(color=cor_extract, label='Extra√ß√£o de Dados'),
        mpatches.Patch(color=cor_transform, label='Transforma√ß√£o'),
        mpatches.Patch(color=cor_load, label='Carga e Visualiza√ß√£o')
    ]
    ax.legend(handles=legend_elements, loc='lower center', ncol=3, 
              bbox_to_anchor=(0.5, -0.05), fontsize=12)
    
    ax.set_xlim(0, 15)
    ax.set_ylim(0, 11)
    ax.axis('off')
    
    plt.tight_layout()
    plt.savefig('/home/ubuntu/arquitetura_etl.png', dpi=300, bbox_inches='tight',
                facecolor='white', edgecolor='none')
    plt.close()

def criar_dashboard_kpis():
    """Cria visualiza√ß√£o de dashboard de KPIs"""
    # Carregar dados
    try:
        df = pd.read_excel('/home/ubuntu/dados_ficticios_1000_linhas.xlsx')
    except:
        # Criar dados fict√≠cios se n√£o existir
        np.random.seed(42)
        df = pd.DataFrame({
            'Valor': np.random.normal(10000, 5000, 1000),
            'Departamento': np.random.choice(['RH', 'TI', 'Financeiro', 'Compras'], 1000),
            'Data': pd.date_range('2023-01-01', periods=1000, freq='D')
        })
    
    fig = plt.figure(figsize=(16, 12))
    
    # Layout do dashboard
    gs = fig.add_gridspec(4, 4, hspace=0.3, wspace=0.3)
    
    # Cores do tema
    cores = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7', '#DDA0DD']
    
    # KPI 1: Total de Transa√ß√µes
    ax1 = fig.add_subplot(gs[0, 0])
    ax1.text(0.5, 0.7, f'{len(df):,}', ha='center', va='center', 
             fontsize=32, fontweight='bold', color=cores[0])
    ax1.text(0.5, 0.3, 'Total de\nTransa√ß√µes', ha='center', va='center', 
             fontsize=14, color='#2C3E50')
    ax1.set_xlim(0, 1)
    ax1.set_ylim(0, 1)
    ax1.axis('off')
    ax1.add_patch(plt.Rectangle((0.05, 0.05), 0.9, 0.9, fill=False, 
                               edgecolor=cores[0], linewidth=3))
    
    # KPI 2: Valor Total
    ax2 = fig.add_subplot(gs[0, 1])
    valor_total = df['Valor'].sum()
    ax2.text(0.5, 0.7, f'R$ {valor_total/1000000:.1f}M', ha='center', va='center', 
             fontsize=28, fontweight='bold', color=cores[1])
    ax2.text(0.5, 0.3, 'Valor Total\nProcessado', ha='center', va='center', 
             fontsize=14, color='#2C3E50')
    ax2.set_xlim(0, 1)
    ax2.set_ylim(0, 1)
    ax2.axis('off')
    ax2.add_patch(plt.Rectangle((0.05, 0.05), 0.9, 0.9, fill=False, 
                               edgecolor=cores[1], linewidth=3))
    
    # KPI 3: Departamentos
    ax3 = fig.add_subplot(gs[0, 2])
    n_dept = df['Departamento'].nunique()
    ax3.text(0.5, 0.7, f'{n_dept}', ha='center', va='center', 
             fontsize=32, fontweight='bold', color=cores[2])
    ax3.text(0.5, 0.3, 'Departamentos\nAtivos', ha='center', va='center', 
             fontsize=14, color='#2C3E50')
    ax3.set_xlim(0, 1)
    ax3.set_ylim(0, 1)
    ax3.axis('off')
    ax3.add_patch(plt.Rectangle((0.05, 0.05), 0.9, 0.9, fill=False, 
                               edgecolor=cores[2], linewidth=3))
    
    # KPI 4: Valor M√©dio
    ax4 = fig.add_subplot(gs[0, 3])
    valor_medio = df['Valor'].mean()
    ax4.text(0.5, 0.7, f'R$ {valor_medio:,.0f}', ha='center', va='center', 
             fontsize=24, fontweight='bold', color=cores[3])
    ax4.text(0.5, 0.3, 'Valor M√©dio\npor Transa√ß√£o', ha='center', va='center', 
             fontsize=14, color='#2C3E50')
    ax4.set_xlim(0, 1)
    ax4.set_ylim(0, 1)
    ax4.axis('off')
    ax4.add_patch(plt.Rectangle((0.05, 0.05), 0.9, 0.9, fill=False, 
                               edgecolor=cores[3], linewidth=3))
    
    # Gr√°fico 1: Distribui√ß√£o por Departamento
    ax5 = fig.add_subplot(gs[1, :2])
    dept_data = df.groupby('Departamento')['Valor'].sum().sort_values(ascending=True)
    bars = ax5.barh(dept_data.index, dept_data.values, color=cores[:len(dept_data)])
    ax5.set_title('Distribui√ß√£o de Valores por Departamento', fontsize=14, fontweight='bold')
    ax5.set_xlabel('Valor Total (R$)')
    
    # Adicionar valores nas barras
    for i, bar in enumerate(bars):
        width = bar.get_width()
        ax5.text(width + width*0.01, bar.get_y() + bar.get_height()/2, 
                f'R$ {width/1000:.0f}K', ha='left', va='center', fontsize=10)
    
    # Gr√°fico 2: Tend√™ncia Temporal
    ax6 = fig.add_subplot(gs[1, 2:])
    df['Data'] = pd.to_datetime(df['Data'])
    temporal = df.groupby(df['Data'].dt.to_period('M'))['Valor'].sum()
    ax6.plot(range(len(temporal)), temporal.values, marker='o', linewidth=3, 
             markersize=8, color=cores[4])
    ax6.set_title('Tend√™ncia Temporal de Valores', fontsize=14, fontweight='bold')
    ax6.set_xlabel('Per√≠odo (Meses)')
    ax6.set_ylabel('Valor Total (R$)')
    ax6.grid(True, alpha=0.3)
    
    # Gr√°fico 3: Distribui√ß√£o de Valores
    ax7 = fig.add_subplot(gs[2, :2])
    ax7.hist(df['Valor'], bins=30, alpha=0.7, color=cores[5], edgecolor='black')
    ax7.set_title('Distribui√ß√£o de Valores das Transa√ß√µes', fontsize=14, fontweight='bold')
    ax7.set_xlabel('Valor (R$)')
    ax7.set_ylabel('Frequ√™ncia')
    ax7.grid(True, alpha=0.3)
    
    # Gr√°fico 4: Pizza por Departamento
    ax8 = fig.add_subplot(gs[2, 2:])
    dept_counts = df['Departamento'].value_counts()
    wedges, texts, autotexts = ax8.pie(dept_counts.values, labels=dept_counts.index, 
                                      autopct='%1.1f%%', colors=cores[:len(dept_counts)])
    ax8.set_title('Distribui√ß√£o de Transa√ß√µes por Departamento', fontsize=14, fontweight='bold')
    
    # Estat√≠sticas resumo
    ax9 = fig.add_subplot(gs[3, :])
    stats_text = f"""
    üìä ESTAT√çSTICAS RESUMO DO DATASET
    
    ‚Ä¢ Per√≠odo dos Dados: {df['Data'].min().strftime('%d/%m/%Y')} a {df['Data'].max().strftime('%d/%m/%Y')}
    ‚Ä¢ Valor M√≠nimo: R$ {df['Valor'].min():,.2f}  |  Valor M√°ximo: R$ {df['Valor'].max():,.2f}
    ‚Ä¢ Desvio Padr√£o: R$ {df['Valor'].std():,.2f}  |  Mediana: R$ {df['Valor'].median():,.2f}
    ‚Ä¢ Departamento com Maior Volume: {dept_data.index[-1]} (R$ {dept_data.iloc[-1]:,.0f})
    """
    
    ax9.text(0.5, 0.5, stats_text, ha='center', va='center', fontsize=12,
             bbox=dict(boxstyle="round,pad=0.5", facecolor='lightgray', alpha=0.8))
    ax9.set_xlim(0, 1)
    ax9.set_ylim(0, 1)
    ax9.axis('off')
    
    # T√≠tulo principal
    fig.suptitle('üéØ DASHBOARD DE AN√ÅLISE DE DADOS - VIS√ÉO EXECUTIVA', 
                fontsize=20, fontweight='bold', y=0.98)
    
    plt.savefig('/home/ubuntu/dashboard_kpis.png', dpi=300, bbox_inches='tight',
                facecolor='white', edgecolor='none')
    plt.close()

def criar_fluxograma_processo():
    """Cria fluxograma do processo de automa√ß√£o"""
    fig, ax = plt.subplots(figsize=(14, 10))
    
    # Cores
    cores = {
        'inicio': '#2ECC71',
        'processo': '#3498DB', 
        'decisao': '#F39C12',
        'fim': '#E74C3C',
        'dados': '#9B59B6'
    }
    
    def criar_elemento(ax, x, y, width, height, text, tipo, color):
        if tipo == 'decisao':
            # Losango para decis√£o
            diamond = mpatches.FancyBboxPatch((x, y), width, height,
                                            boxstyle="round,pad=0.02",
                                            facecolor=color, edgecolor='white', linewidth=2)
        else:
            # Ret√¢ngulo para outros
            diamond = mpatches.FancyBboxPatch((x, y), width, height,
                                            boxstyle="round,pad=0.05",
                                            facecolor=color, edgecolor='white', linewidth=2)
        ax.add_patch(diamond)
        ax.text(x + width/2, y + height/2, text, ha='center', va='center',
                fontsize=10, fontweight='bold', color='white', wrap=True)
    
    def criar_seta(ax, x1, y1, x2, y2, texto=''):
        ax.annotate('', xy=(x2, y2), xytext=(x1, y1),
                   arrowprops=dict(arrowstyle='->', lw=2, color='#2C3E50'))
        if texto:
            mid_x, mid_y = (x1 + x2) / 2, (y1 + y2) / 2
            ax.text(mid_x + 0.2, mid_y, texto, fontsize=9, color='#2C3E50', fontweight='bold')
    
    # Elementos do fluxograma
    elementos = [
        (2, 9, 2.5, 0.8, 'üöÄ IN√çCIO\nCarregar Dados', 'inicio', cores['inicio']),
        (2, 7.5, 2.5, 0.8, 'üìä EXTRACT\nFontes de Dados', 'processo', cores['processo']),
        (2, 6, 2.5, 0.8, '‚úÖ Dados\nV√°lidos?', 'decisao', cores['decisao']),
        (6, 6, 2.5, 0.8, 'üßπ TRANSFORM\nLimpar Dados', 'processo', cores['processo']),
        (10, 6, 2.5, 0.8, 'üìà LOAD\nGerar Relat√≥rios', 'processo', cores['processo']),
        (6, 4, 2.5, 0.8, 'üìä Criar\nVisualiza√ß√µes', 'processo', cores['dados']),
        (10, 4, 2.5, 0.8, 'üìß Enviar\nRelat√≥rios', 'processo', cores['processo']),
        (6, 2, 2.5, 0.8, 'üéØ FIM\nProcesso Conclu√≠do', 'fim', cores['fim']),
        (2, 4, 2.5, 0.8, '‚ö†Ô∏è Corrigir\nErros', 'processo', cores['fim'])
    ]
    
    for x, y, w, h, text, tipo, color in elementos:
        criar_elemento(ax, x, y, w, h, text, tipo, color)
    
    # Setas do fluxo
    setas = [
        (3.25, 9, 3.25, 8.3),  # In√≠cio -> Extract
        (3.25, 7.5, 3.25, 6.8),  # Extract -> Valida√ß√£o
        (4.5, 6.4, 6, 6.4, 'SIM'),  # Valida√ß√£o -> Transform
        (3.25, 6, 3.25, 4.8, 'N√ÉO'),  # Valida√ß√£o -> Corrigir
        (2, 4.4, 2, 5.6),  # Corrigir -> Valida√ß√£o (volta)
        (8.5, 6.4, 10, 6.4),  # Transform -> Load
        (7.25, 6, 7.25, 4.8),  # Transform -> Visualiza√ß√µes
        (11.25, 6, 11.25, 4.8),  # Load -> Enviar
        (8.5, 4.4, 10, 4.4),  # Visualiza√ß√µes -> Enviar
        (11.25, 4, 7.25, 2.8),  # Enviar -> Fim
    ]
    
    for seta in setas:
        if len(seta) == 5:
            criar_seta(ax, seta[0], seta[1], seta[2], seta[3], seta[4])
        else:
            criar_seta(ax, seta[0], seta[1], seta[2], seta[3])
    
    # T√≠tulo
    ax.text(7, 10.5, 'üîÑ FLUXOGRAMA DO PROCESSO DE AUTOMA√á√ÉO ETL', 
            fontsize=16, fontweight='bold', ha='center', color='#2C3E50')
    
    # Legenda
    legend_elements = [
        mpatches.Patch(color=cores['inicio'], label='In√≠cio/Fim'),
        mpatches.Patch(color=cores['processo'], label='Processo'),
        mpatches.Patch(color=cores['decisao'], label='Decis√£o'),
        mpatches.Patch(color=cores['dados'], label='Dados/Visualiza√ß√£o')
    ]
    ax.legend(handles=legend_elements, loc='upper right', fontsize=10)
    
    ax.set_xlim(0, 14)
    ax.set_ylim(1, 11)
    ax.axis('off')
    
    plt.tight_layout()
    plt.savefig('/home/ubuntu/fluxograma_processo.png', dpi=300, bbox_inches='tight',
                facecolor='white', edgecolor='none')
    plt.close()

def criar_comparativo_ferramentas():
    """Cria gr√°fico comparativo de ferramentas"""
    fig, ax = plt.subplots(figsize=(12, 8))
    
    # Dados das ferramentas
    ferramentas = ['Excel + VBA', 'Python + Pandas', 'Power BI', 'SQL + ETL', 'Power Query']
    categorias = ['Facilidade de Uso', 'Performance', 'Escalabilidade', 'Flexibilidade', 'Custo-Benef√≠cio']
    
    # Scores (0-10)
    scores = {
        'Excel + VBA': [9, 6, 4, 7, 9],
        'Python + Pandas': [6, 9, 9, 10, 8],
        'Power BI': [8, 7, 7, 6, 7],
        'SQL + ETL': [5, 10, 10, 8, 6],
        'Power Query': [9, 7, 6, 7, 9]
    }
    
    # Configurar gr√°fico radar
    angles = np.linspace(0, 2 * np.pi, len(categorias), endpoint=False).tolist()
    angles += angles[:1]  # Fechar o c√≠rculo
    
    cores_ferramentas = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']
    
    for i, (ferramenta, cor) in enumerate(zip(ferramentas, cores_ferramentas)):
        valores = scores[ferramenta]
        valores += valores[:1]  # Fechar o c√≠rculo
        
        ax.plot(angles, valores, 'o-', linewidth=2, label=ferramenta, color=cor)
        ax.fill(angles, valores, alpha=0.25, color=cor)
    
    # Configurar eixos
    ax.set_xticks(angles[:-1])
    ax.set_xticklabels(categorias, fontsize=12)
    ax.set_ylim(0, 10)
    ax.set_yticks(range(0, 11, 2))
    ax.grid(True)
    
    # T√≠tulo e legenda
    ax.set_title('üîß COMPARATIVO DE FERRAMENTAS DE AUTOMA√á√ÉO', 
                fontsize=16, fontweight='bold', pad=20)
    ax.legend(loc='upper right', bbox_to_anchor=(1.3, 1.0), fontsize=10)
    
    plt.tight_layout()
    plt.savefig('/home/ubuntu/comparativo_ferramentas.png', dpi=300, bbox_inches='tight',
                facecolor='white', edgecolor='none')
    plt.close()

def criar_timeline_implementacao():
    """Cria timeline de implementa√ß√£o do projeto"""
    fig, ax = plt.subplots(figsize=(14, 8))
    
    # Dados do timeline
    fases = [
        ('Semana 1-2', 'An√°lise e Planejamento', 'üìã', '#3498DB'),
        ('Semana 3-4', 'Setup do Ambiente', '‚öôÔ∏è', '#2ECC71'),
        ('Semana 5-6', 'Desenvolvimento ETL', 'üîÑ', '#E74C3C'),
        ('Semana 7-8', 'Cria√ß√£o de Dashboards', 'üìä', '#F39C12'),
        ('Semana 9-10', 'Testes e Valida√ß√£o', '‚úÖ', '#9B59B6'),
        ('Semana 11-12', 'Deploy e Treinamento', 'üöÄ', '#1ABC9C')
    ]
    
    y_positions = range(len(fases))
    
    # Criar barras horizontais
    for i, (periodo, atividade, icone, cor) in enumerate(fases):
        # Barra principal
        ax.barh(i, 2, left=i*2, height=0.6, color=cor, alpha=0.8, edgecolor='white', linewidth=2)
        
        # Texto da atividade
        ax.text(i*2 + 1, i, f'{icone} {atividade}', ha='center', va='center',
                fontsize=11, fontweight='bold', color='white')
        
        # Per√≠odo
        ax.text(i*2 + 1, i - 0.4, periodo, ha='center', va='center',
                fontsize=9, color='#2C3E50', fontweight='bold')
    
    # Setas conectoras
    for i in range(len(fases) - 1):
        ax.annotate('', xy=(i*2 + 2.1, i + 1), xytext=(i*2 + 1.9, i),
                   arrowprops=dict(arrowstyle='->', lw=2, color='#2C3E50'))
    
    # Configura√ß√µes do gr√°fico
    ax.set_xlim(-0.5, len(fases) * 2 - 0.5)
    ax.set_ylim(-0.8, len(fases) - 0.2)
    ax.set_yticks([])
    ax.set_xticks([])
    
    # T√≠tulo
    ax.text(len(fases), len(fases) - 0.5, 'üìÖ TIMELINE DE IMPLEMENTA√á√ÉO DO PROJETO', 
            fontsize=16, fontweight='bold', ha='center', color='#2C3E50')
    
    # Remover bordas
    for spine in ax.spines.values():
        spine.set_visible(False)
    
    plt.tight_layout()
    plt.savefig('/home/ubuntu/timeline_implementacao.png', dpi=300, bbox_inches='tight',
                facecolor='white', edgecolor='none')
    plt.close()

def main():
    """Executa todas as fun√ß√µes de cria√ß√£o de visualiza√ß√µes"""
    print("üé® Criando visualiza√ß√µes para o README...")
    
    criar_banner_projeto()
    print("‚úÖ Banner do projeto criado")
    
    criar_arquitetura_etl()
    print("‚úÖ Diagrama de arquitetura ETL criado")
    
    criar_dashboard_kpis()
    print("‚úÖ Dashboard de KPIs criado")
    
    criar_fluxograma_processo()
    print("‚úÖ Fluxograma do processo criado")
    
    criar_comparativo_ferramentas()
    print("‚úÖ Comparativo de ferramentas criado")
    
    criar_timeline_implementacao()
    print("‚úÖ Timeline de implementa√ß√£o criado")
    
    print("\nüéâ Todas as visualiza√ß√µes foram criadas com sucesso!")
    print("üìÅ Arquivos salvos:")
    print("   ‚Ä¢ banner_projeto.png")
    print("   ‚Ä¢ arquitetura_etl.png") 
    print("   ‚Ä¢ dashboard_kpis.png")
    print("   ‚Ä¢ fluxograma_processo.png")
    print("   ‚Ä¢ comparativo_ferramentas.png")
    print("   ‚Ä¢ timeline_implementacao.png")

if __name__ == "__main__":
    main()

